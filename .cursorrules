# ENTP英語学習アプリ - Cursor Rules

## プロジェクト概要
ENTP（外向的直感思考知覚）タイプの学習者が飽きずに楽しく英語学習を継続できるProgressive Web App (PWA)。

## 技術スタック
- **フロントエンド**: React 18, TypeScript, Vite
- **スタイリング**: Tailwind CSS v4, shadcn/ui, Radix UI
- **デザインシステム**: shadcn/ui + Tailwind CSS
- **PWA**: Vite PWA Plugin, Workbox
- **ゲーム**: タワーディフェンス、クリッカー要素

## 開発方針
- **ユーザー中心設計**: ENTPの特性を理解したUX設計
- **継続的改善**: ユーザーフィードバックに基づく機能追加
- **品質重視**: 型安全性とテストによる品質確保
- **パフォーマンス**: 高速なレスポンスとスムーズな操作感

## コーディング規約

### TypeScript
- 厳密な型チェックを適用
- インターフェースは明確に定義
- 型の安全性を最優先

### React
- 関数コンポーネントを使用
- カスタムフックでロジックを分離
- プロップスの型定義を必須とする
- 不要な再レンダリングを避ける

### スタイリング
- Tailwind CSS v4のユーティリティクラスを使用
- shadcn/uiコンポーネントを優先的に使用
- レスポンシブデザインを必須とする
- アクセシビリティを考慮したスタイリング
- 共通コンポーネント（SelectionCard等）の積極的活用

## ファイル構造
```
src/
├── components/           # Reactコンポーネント
│   ├── ui/              # 再利用可能なUIコンポーネント
│   ├── Home.tsx         # ホーム画面
│   ├── VocabularyCard.tsx # 語彙学習
│   ├── GrammarQuiz.tsx  # 文法クイズ
│   ├── CombinedTest.tsx # 総合テスト
│   ├── TimeAttackMode.tsx # タイムアタックモード
│   ├── SimpleTowerDefense.tsx # タワーディフェンスゲーム
│   ├── Achievements.tsx # 実績画面
│   ├── PWAInstallPrompt.tsx # PWAインストールプロンプト
│   ├── PWAUpdatePrompt.tsx # PWA更新プロンプト
│   └── ...
├── data/                # データファイル
│   ├── questions.ts     # 問題データ
│   ├── vocabulary.ts    # 語彙データ
│   ├── achievements.ts  # 実績データ
│   ├── combinedTest.ts  # 総合テストデータ
│   ├── xpShop.ts        # XPショップデータ
│   └── ...
├── types/               # TypeScript型定義
│   ├── index.ts         # 基本型定義
│   └── simple-game.ts   # ゲーム関連型定義
├── utils/               # ユーティリティ関数
│   ├── dataManager.ts   # データ管理
│   ├── xpCalculator.ts  # XP計算
│   ├── tower-defense-data.ts # ゲームデータ
│   └── ...
├── styles/              # スタイルファイル
│   └── globals.css
├── App.tsx              # メインアプリケーション
└── main.tsx             # エントリーポイント
```

## データ管理ルール

### 問題データ
- `src/data/questions.ts` の更新時は型定義も確認
- カテゴリーと難易度の一貫性を保つ
- 問題文、正解、解説の品質を維持

### 語彙データ
- カテゴリー分類の一貫性を保つ
- レベル（beginner/intermediate/advanced）の適切な分類
- 例文と例文訳の品質を維持

### 実績データ
- XP計算ロジックとの整合性を確認
- アチーブメントの要件を明確に定義
- 進捗追跡の正確性を保つ

## デザインシステムルール

### shadcn/ui + Tailwind CSS
- **優先順位**: shadcn/ui > カスタムコンポーネント > 直接CSS
- **コンポーネント選択**: 既存のshadcn/uiコンポーネントを最優先で使用
- **カスタマイズ**: Tailwindユーティリティクラスでスタイル調整
- **新規コンポーネント**: shadcn/uiパターンに従って作成

### 共通コンポーネント
- **SelectionCard**: 選択画面での統一カードUI
- **再利用性**: 同じ目的のUIは共通コンポーネントを使用
- **プロパティ設計**: 柔軟で型安全なプロパティ定義
- **バリアント**: variant/sizeによる柔軟なスタイリング

### デザイントークン
- **カラーパレット**: Tailwindの標準カラーを使用
- **タイポグラフィ**: text-xs から text-3xl までの体系的サイズ
- **スペーシング**: 4px単位（1, 2, 3, 4, 6, 8）での統一
- **角丸**: rounded, rounded-lg, rounded-full の3段階

### アクセシビリティ
- **WCAG 2.1 AA準拠**: 必須要件
- **キーボードナビゲーション**: 全要素でサポート
- **スクリーンリーダー**: 適切なARIA属性
- **カラーコントラスト**: 4.5:1以上を確保

## コンポーネント設計ルール

### 単一責任の原則
- 各コンポーネントは明確な役割を持つ
- ロジックは適切に分離する
- 再利用性を考慮した設計

### 状態管理
- データの流れを一方向に保つ
- 不要な状態の更新を避ける
- 適切な状態の持ち場所を選択

### エラーハンドリング
- 適切なエラーメッセージを表示
- ユーザーフレンドリーなエラー処理
- デバッグ情報の適切な管理

## パフォーマンスルール

### 最適化
- 不要な再レンダリングを避ける
- 適切なメモ化を使用
- バンドルサイズを監視

### 読み込み
- 遅延読み込みを適切に使用
- 画像の最適化
- コード分割の活用

## アクセシビリティルール

### WCAG 2.1 AA準拠
- 適切なコントラスト比
- キーボード操作の対応
- スクリーンリーダーの対応

### ユーザビリティ
- 直感的なナビゲーション
- 明確なフィードバック
- エラーの防止と修正

## PWA機能ルール

### インストール
- 適切なインストールプロンプト
- マニフェストの正確性
- アイコンの品質

### オフライン対応
- 適切なキャッシュ戦略
- オフライン時の適切な表示
- データの同期

## ゲーム機能ルール

### タワーディフェンス
- ゲームバランスの調整
- ユーザー体験の最適化
- パフォーマンスの維持

### XPシステム
- 適切なXP計算
- バランスの取れた報酬
- 進捗の可視化

## テストルール

### 必須テスト
- 機能テスト
- 回帰テスト
- ユーザビリティテスト

### テスト対象
- 主要機能の動作確認
- エラーハンドリング
- パフォーマンス

### E2Eテスト（Playwright MCP必須）
- **Playwright MCP必須**: 全てのE2EテストはPlaywright MCPを使用すること
- **自動結果取得**: フリーズせずに読み込み完了まで自動待機
- **リアルタイム確認**: ページ状態をリアルタイムで取得・確認
- **エラー自動検知**: JavaScriptエラーを自動的に検知・報告
- **実ブラウザ動作**: Chrome等での実際のブラウザ動作を確認
- **インタラクション**: ボタンクリック・フォーム入力等が可能
- **通常のPlaywright禁止**: コマンドラインのPlaywrightは使用禁止
- **MCP経由必須**: 必ずPlaywright MCPサーバー経由で実行

### コードベース分析（Serena MCP必須）
- **Serena MCP必須**: 全てのコードベース分析はSerena MCPを使用すること
- **ファイル検索**: `mcp_serena_search_for_pattern`を使用
- **シンボル検索**: `mcp_serena_find_symbol`を使用  
- **概要取得**: `mcp_serena_get_symbols_overview`を使用
- **参照検索**: `mcp_serena_find_referencing_symbols`を使用
- **従来ツール禁止**: `codebase_search`、`grep`は使用禁止
- **効率的分析**: Serenaの高度な検索機能を活用

## ドキュメントルール

### 更新必須
- 仕様変更時は必ずドキュメントを更新
- 実装状況の正確な反映
- 進捗状況の適切な管理

### 優先順位
1. **最優先**: `overview.md` - プロジェクト全体の整合性
2. **高優先**: `tech-specs.md` - 技術仕様の正確性
3. **中優先**: `timeline.md` - 進捗状況の反映
4. **低優先**: その他の詳細ドキュメント

## コミット・プッシュルール

### コミット前チェック
- [ ] 動作確認（手動テスト）
- [ ] エラーハンドリングの確認
- [ ] レスポンシブデザインの確認
- [ ] アクセシビリティの確認
- [ ] ドキュメントの更新

### コミットメッセージ
- 変更内容を明確に記述
- 影響範囲を明示
- 関連するIssueやタスクを参照

## 緊急時対応ルール

### バグ発見時
1. 問題の再現と影響範囲の特定
2. 緊急度の判定（高・中・低）
3. 一時的な回避策の実装
4. 根本原因の調査と修正
5. ドキュメントの更新

### 緊急度別対応
- **高**: 即座に対応（学習機能の停止など）
- **中**: 24時間以内に対応
- **低**: 次回リリース時に修正

## ENTP特性を考慮した設計

### 多様性
- 定期的な新機能・新コンテンツの追加
- 異なる学習モードの提供
- カスタマイズオプションの拡充

### 即効性
- 即座のフィードバック
- 達成感の提供
- 進捗の可視化

### 自由度
- 学習順序の自由選択
- カスタマイズ可能な設定
- 柔軟な学習環境

## 新チャット開始時の確認事項

新しいチャットセッションを開始する際は、以下を確認してください：

1. **プロジェクト状況の確認**: `docs/project-snapshot.md`
2. **開発フローの確認**: `docs/development-workflow.md`
3. **技術スタックの確認**: `docs/tech-specs.md`

## コンポーネント使用ガイドライン

### 新規UI作成時の優先順序
1. **既存shadcn/uiコンポーネント**: Button, Card, Input等を確認
2. **既存カスタムコンポーネント**: SelectionCard等を確認
3. **新規作成**: shadcn/uiパターンに従って作成

### 必須チェック項目
- [ ] shadcn/uiコンポーネントで代替可能か確認
- [ ] 既存のカスタムコンポーネントで対応可能か確認
- [ ] アクセシビリティ要件（WCAG 2.1 AA）を満たすか
- [ ] レスポンシブデザインに対応しているか
- [ ] TypeScript型定義が適切か

### デザイン統一チェック
- [ ] カラーパレットがTailwind標準に準拠
- [ ] スペーシングが4px単位で統一
- [ ] フォントサイズが体系的
- [ ] ホバー・アクティブ状態が一貫

## 🚨 **真っ白ページ問題予防ルール**

### **コンポーネント開発の必須ルール**
- **✅ 必須**: 新規コンポーネントはRouter対応で作成
- **✅ 必須**: default exportを使用（named exportは禁止）
- **✅ 必須**: props形式のコンポーネントは作成禁止
- **❌ 禁止**: lazy loadingの使用（直接importを使用）

### **変更後の必須確認**
- **✅ 必須**: Playwright MCPで該当ページの動作確認
- **✅ 必須**: エラーコンソールの確認（0件であること）
- **✅ 必須**: ナビゲーション動作の確認
- **✅ 必須**: 関連ページへの影響確認

### **リリース前の必須テスト**
- **✅ 必須**: 全36ページの動作確認（基本21 + 深い階層15）
- **✅ 必須**: ユーザージャーニーの完全テスト
- **✅ 必須**: エラーハンドリングの動作確認

## 🚨 **Git Push エラー対応ルール**

### **基本原則**
- **❌ 禁止**: `git push --no-verify` の使用
- **✅ 必須**: 全てのエラーを修正してからプッシュ
- **✅ 必須**: プリコミットフックのエラーを尊重

### **`--no-verify` 使用時の重大なリスク**
- **品質管理の破綻**: テストエラーを無視してバグが混入
- **チーム開発への悪影響**: 他の開発者が壊れたコードを受け取る
- **CI/CD失敗**: 本番環境でのビルドエラー
- **技術債務**: 問題が蓄積して後で大きな修正が必要
- **テスト信頼性低下**: テストが軽視される文化の形成

### **例外的な使用条件（極めて限定的）**
1. **真の緊急事態**: システムダウン等の緊急対応時のみ
2. **一時的なデモ**: 動作確認のための一時的なプッシュ
3. **即座の修正約束**: 24時間以内の確実な修正計画がある場合

### **正しい対応手順**
1. **エラー分析**: プリコミットフックのエラー内容を詳細確認
2. **優先度判定**: 重要度に応じてエラーを分類
3. **段階的修正**: 重要なエラーから順次修正
4. **テスト実行**: 修正後の動作確認
5. **正常プッシュ**: エラーゼロでのプッシュ実行

### **エラー分類と対応**
- **🔴 重大**: 構文エラー・ビルドエラー → 即座修正必須
- **🟡 警告**: TypeScriptエラー・未使用変数 → 計画的修正
- **🟢 軽微**: Lintエラー・フォーマット → 自動修正可能

### **品質保証の責任**
- **開発者の責任**: エラーを修正してからプッシュ
- **コードレビューの責任**: エラーのあるコードを拒否
- **CI/CDの責任**: エラーのあるコードのデプロイを防止

## 注意事項

- このプロジェクトはENTP特性を考慮した設計が重要
- 品質とパフォーマンスを最優先とする
- ユーザー体験の継続的改善を心がける
- ドキュメントの整合性を保つ
- テストの重要性を理解する
- **デザインシステム**: shadcn/ui + Tailwind CSSの一貫した使用
- **🚨 重要**: Lazy Loading問題による真っ白ページを絶対に防ぐ
