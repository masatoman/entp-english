name: Comprehensive Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # 毎日午前2時（JST）にテスト実行
    - cron: '0 17 * * *'

env:
  NODE_VERSION: "18"
  CACHE_VERSION: v1

jobs:
  # ユニットテスト（厳密実行）
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          echo "📦 依存関係をインストール中..."
          npm ci --prefer-offline --no-audit
          echo "✅ 依存関係インストール完了"

      - name: TypeScript type check
        run: |
          echo "🔍 TypeScript型チェック実行中..."
          npx tsc --noEmit
        continue-on-error: false

      - name: Lint check
        run: |
          echo "🔍 ESLintチェック実行中..."
          npx eslint src/ --ext .ts,.tsx --max-warnings 0
        continue-on-error: false

      - name: Run unit tests
        run: |
          echo "🧪 ユニットテスト実行中..."
          npm run test:unit
        continue-on-error: false

      - name: Generate coverage report
        run: |
          echo "📊 テストカバレッジ生成中..."
          npm run test:coverage
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

      - name: Coverage threshold check
        run: |
          echo "📈 カバレッジ閾値チェック..."
          if [ -f "coverage/lcov.info" ]; then
            COVERAGE=$(npx lcov-summary coverage/lcov.info | grep "Lines" | awk '{print $2}' | sed 's/%//')
            echo "現在のカバレッジ: ${COVERAGE}%"
            if (( $(echo "$COVERAGE < 70" | bc -l) )); then
              echo "❌ カバレッジが70%未満です"
              exit 1
            else
              echo "✅ カバレッジ閾値クリア"
            fi
          fi
        continue-on-error: true

  # 統合テスト（厳密実行）
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: unit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          echo "📦 依存関係をインストール中..."
          npm ci --prefer-offline --no-audit
          echo "✅ 依存関係インストール完了"

      - name: Build application
        run: |
          echo "🏗️ アプリケーションをビルド中..."
          npm run build
          echo "✅ ビルド完了"

      - name: Run integration tests
        run: |
          echo "🔗 統合テスト実行中..."
          npm run test:integration
        continue-on-error: false

      - name: Test data integrity
        run: |
          echo "🔍 データ整合性チェック..."
          # ビルド成果物の検証
          test -f dist/index.html || (echo "❌ index.html not found" && exit 1)
          test -f dist/manifest.webmanifest || (echo "❌ manifest.webmanifest not found" && exit 1)
          test -d dist/assets || (echo "❌ assets directory not found" && exit 1)
          echo "✅ データ整合性チェック完了"
        continue-on-error: false

  # E2Eテスト（本格導入）
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: integration-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          echo "📦 依存関係をインストール中..."
          npm ci --prefer-offline --no-audit
          echo "✅ 依存関係インストール完了"

      - name: Build application
        run: |
          echo "🏗️ アプリケーションをビルド中..."
          npm run build
          echo "✅ ビルド完了"

      - name: Install Playwright
        run: |
          echo "🎭 Playwrightインストール中..."
          npx playwright install --with-deps
          echo "✅ Playwrightインストール完了"

      - name: Run E2E tests
        run: |
          echo "🎭 E2Eテスト実行中..."
          npm run test:e2e
        continue-on-error: false

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload E2E test videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-videos
          path: test-results/
          retention-days: 3

  # ビルドテスト（厳密実行）
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit-tests, integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          echo "📦 依存関係をインストール中..."
          npm ci --prefer-offline --no-audit
          echo "✅ 依存関係インストール完了"

      - name: Generate PWA icons
        run: npm run generate-icons

      - name: Build application
        run: |
          echo "🏗️ アプリケーションをビルド中..."
          npm run build
          echo "✅ ビルド完了"

      - name: Verify build output
        run: |
          echo "🔍 ビルド成果物の検証..."
          test -f dist/index.html || (echo "❌ index.html not found" && exit 1)
          test -f dist/manifest.webmanifest || (echo "❌ manifest.webmanifest not found" && exit 1)
          test -d dist/assets || (echo "❌ assets directory not found" && exit 1)
          echo "✅ ビルド成果物検証完了"

      - name: Bundle size analysis
        run: |
          echo "📊 バンドルサイズ分析..."
          ls -la dist/assets/ | head -10
          echo "📈 最大ファイルサイズ:"
          find dist/assets -name "*.js" -exec ls -lh {} \; | sort -k5 -hr | head -5
          echo "📈 最大CSSファイルサイズ:"
          find dist/assets -name "*.css" -exec ls -lh {} \; | sort -k5 -hr | head -3
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 30

  # セキュリティ監査（厳密実行）
  security-audit:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          echo "📦 依存関係をインストール中..."
          npm ci --prefer-offline --no-audit
          echo "✅ 依存関係インストール完了"

      - name: Run security audit
        run: |
          echo "🔒 セキュリティ監査実行中..."
          npm audit --audit-level high
        continue-on-error: false

      - name: Check for known vulnerabilities
        run: |
          echo "🛡️ 既知の脆弱性チェック..."
          npm audit --audit-level moderate --json > audit-results.json || true
          if [ -s audit-results.json ]; then
            echo "⚠️ 中程度の脆弱性が検出されました"
            cat audit-results.json | jq '.vulnerabilities | length' || echo "0"
          else
            echo "✅ 脆弱性は検出されませんでした"
          fi
        continue-on-error: true

  # パフォーマンステスト（厳密実行）
  performance-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          echo "📦 依存関係をインストール中..."
          npm ci --prefer-offline --no-audit
          echo "✅ 依存関係インストール完了"

      - name: Build application
        run: |
          echo "🏗️ アプリケーションをビルド中..."
          npm run build
          echo "✅ ビルド完了"

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          echo "🚀 Lighthouseパフォーマンステスト実行中..."
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        continue-on-error: true

      - name: Bundle size analysis
        run: |
          echo "📊 バンドルサイズ分析..."
          ls -la dist/assets/ | head -10
          echo "📈 最大ファイルサイズ:"
          find dist/assets -name "*.js" -exec ls -lh {} \; | sort -k5 -hr | head -5
          echo "📈 最大CSSファイルサイズ:"
          find dist/assets -name "*.css" -exec ls -lh {} \; | sort -k5 -hr | head -3
        continue-on-error: true
